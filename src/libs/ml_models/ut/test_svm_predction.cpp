
#include <boost/test/unit_test.hpp>
#include "acc_data_input.hpp"
#include "expected_prediction.h"
#include "../src/svm_impl/classifiers_generator.h"
#include "../src/svm_impl/svm_model.h"

namespace
{

// arguments for the training
const constexpr auto coat_value = 32.0;
const constexpr auto gamma_value = 0.0078125;

}   // end of namespace

BOOST_AUTO_TEST_CASE(test_svm_acc_model_classifier)
{
    using namespace mlmodels;
    // we would test if we are generating the same results as 
    // we are getting from running libsvm tools - please note that the
    // parameters above as well as the expected results where generated by using
    // tools from libsvm which includes running
    // ./svm-scale -l -1 -u 1 -s range1 train_input > train_input.scale
    // ./svm-scale -r range1 test_input > test_input.scale
    // tools/grid.py train_input.scale
    // ./svm-train -c 32 -g 0.0078125 train_input.scale
    // ./svm-predict test_input.scale train_input.scale.model prediction
    // to generate the data input we generate 400 lines for input for train and 283 lines of test
    // from the file dataset_libsvm in this directory
    auto model = svm::classifier::create_model(svm::classifier::c_rbf_train{
                                                        svm::classifier::c_rbf_train::base_1
                                                            { 
                                                                svm::rbf_args{gamma_value}, 
                                                                svm::base_train_params{}
                                                        },
                                                        svm::classifier::c_rbf_train::base_2{
                                                            coat_value, 0, 0
                                                        }
                                                },
                                                train_features, acc_train_labels
                                            );
    BOOST_TEST_REQUIRE((model.get() != nullptr), "failed to generate C SVM model, with train data");
    // run run prediction
    auto predictions = svm::predict(model, test_features);
    BOOST_TEST_REQUIRE(not predictions.empty(), "failed to get predictions!!");
    BOOST_TEST_REQUIRE(predictions.size() == expected_results_prediction.size(), "number of predictions do not match expetection: "
            <<predictions.size()<<" != "<<expected_results_prediction.size());
    // now compare results
    auto expted_begin = std::begin(expected_results_prediction);
    unsigned int at = 0;
    for (auto our_results : predictions) {
        BOOST_TEST(our_results == *expted_begin, "["<<at<<"] our results "<<our_results<<" do not match expected results "<<*expted_begin);
        ++expted_begin;
        ++at;
    }
//    svm::save(model, "/tmp/ut_csvm_rbf.model");
}
